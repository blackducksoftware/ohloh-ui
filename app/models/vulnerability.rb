class Vulnerability < ActiveRecord::Base
  enum severity: [:low, :medium, :high]

  has_and_belongs_to_many :releases, counter_cache: true

  scope :sort_by, -> (col = 'cve_id', order = :desc) { order("#{col}": order) }

  DESC_LENGTH = 150

  class << self
    def severity_exists?(name)
      severities.keys.include? name
    end

    def details(release_id, filter: {}, sort: {})
      condition = " AND V.severity=#{Vulnerability.severities[filter[:severity]]}" if filter[:severity]
      order = "V.#{sort[:col]} #{sort[:direction]}" if sort[:col]
      sql = <<-SQL
        SELECT V.id, V.cve_id, V.severity, V.published_on, V.description, ARRAY_TO_STRING((ARRAY_AGG(R.version ORDER BY R.released_on DESC))[1:10], ', ') AS recent_releases
        FROM vulnerabilities AS V INNER JOIN releases_vulnerabilities AS RV ON RV.vulnerability_id = V.id INNER JOIN releases AS R ON R.id=RV.release_id
        WHERE V.id IN (SELECT RVT.vulnerability_id FROM releases_vulnerabilities RVT WHERE RVT.release_id=#{release_id}) #{condition} GROUP BY V.id ORDER BY #{order || 'V.cve_id DESC'}
      SQL
      find_by_sql(sql)
    end
  end

  def years_ago?(year = 1)
    published_on.to_date <= year.to_i.years.ago.to_date
  end
end
