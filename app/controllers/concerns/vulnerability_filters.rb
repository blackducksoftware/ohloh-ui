module VulnerabilityFilters
  extend ActiveSupport::Concern

  included do
    skip_before_action :set_project_or_fail
    before_action :set_project
    before_action :find_best_security_set
    before_action :find_all_releases, only: [:index, :filter, :all_version_chart]
    before_action :find_vulnerability_data, only: [:index, :filter]
  end

  private

  def set_project
    project_id = params[:project_id] || params[:id]
    project = Project.by_vanity_url_or_id(project_id)
    @project = project.includes(project_security_sets: [{ releases: :vulnerabilities }]).take
    raise ParamRecordNotFound unless @project
    project_context
    render 'projects/deleted' if @project.deleted?
  end

  def find_best_security_set
    @best_security_set = @project.best_project_security_set
  end

  def find_all_releases
    @releases = @best_security_set.releases.includes(:vulnerabilities) if @best_security_set
  end

  def find_vulnerability_data
    return unless @releases.present?
    find_latest_version
    find_minor_versions
    find_vulnerabilities
  end

  def find_latest_version
    @latest_version = Release.find_by_id(filter_version_param) ||
                      @best_security_set.find_latest_release_from_major_version(filter_major_version_param) ||
                      @releases.latest
  end

  def find_minor_versions
    @minor_versions = if filter_major_version_param.present?
                        @latest_version.minor_versions.sort_by_release_date
                      else
                        @releases.sort_by_release_date
                      end
    @minor_versions = @minor_versions.where("(released_on::DATE <= NOW()::DATE) AND \
      (released_on::DATE >= (NOW() - '#{filter_period_param} year'::INTERVAL)::DATE)") if filter_period_param.present?
  end

  def find_vulnerabilities
    @latest_version = @minor_versions.first if filter_major_version_param.present? && filter_version_param.blank?
    return unless @latest_version
    @vulnerabilities = @latest_version.vulnerabilities
    @vulnerabilities = @vulnerabilities.send(filter_severity_param) if @vulnerabilities.present? &&
                                                                       filter_severity_param
    @vulnerabilities = @vulnerabilities.sort_by_cve_id.paginate(page: page_param, per_page: 10)
  end
end
