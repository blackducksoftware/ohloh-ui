:ruby
  vf = account.best_account_analysis.account_analysis_fact
  pos_ids, more_pos_count = @cbp_map[account.id]
  sorted_cbl = account.decorate.sorted_commits_by_language

.well.well-sm.no_padding
  .pull-left.avatar_new
    = avatar_for account, size: 128

  .pull-left.account_details
    %h3
      = link_to h(truncate(account.name, length: 18)), account_path(account), class: 'margin_top_20',
                title: h(account.name)
    %p.small.word_break_all= truncate(account.markup.try(:first_line), length: 75)
    .small.member_info
      - if account.projects.any?
        - manages_count_text = t 'people.claimed_person.manages', what: pluralize(account.projects.count, 'project')
        %p= link_to manages_count_text, account_projects_path(account)
      %p= t '.member_since', since: account.created_at.strftime('%B %Y')
  - if only_device?
    .pull-left.kudo_rank.signature_color
      = account.kudo_rank

    .mini-badges-section.pull-left.kudo_badge
      = render 'badges_row', badges: [BadgeDecorator.new(KudoRankBadge.new(account))]
  .pull-left.commits_summary
    - if vf.commits > 0 && @positions_map.any?
      .commits_count.pull-left
        = vf.commits

        .text-center
          = link_to pluralize_without_count(vf.commits, 'Commit'), account_positions_path(account)
      .pull-left.in= t('.in')
      - if sorted_cbl.empty?
        .pull-left.language_summary.no_lang_summary
          = t('.no_lang_summary')
      - else
        .pull-left.language_summary
          .pull-left{ style: 'min-height: 99px' }
            - sorted_cbl.first(3).each do |lang, lang_hash|
              .language_name{ style: "background-color:##{language_color(lang)}; color: ##{language_text_color(lang)}" }
                %span= link_to lang_hash[:nice_name], language_path(lang)
          .pull-left.other_language
            - if sorted_cbl.length > 3
              - other_langs_count = sorted_cbl.length - 3
              - pluaral_term = pluralize_without_count(other_langs_count, 'language')
              - langs_link = t('.langs_link_text1', other_langs_count: other_langs_count, pluaral_term: pluaral_term)
              = link_to langs_link, account_languages_path(account)
            - else
              = link_to t('.langs_link_text2'), account_languages_path(account)

      .pull-left.in= t('.to')
      .pull-left.project_summary
        - pos_ids.each do |pos_id|
          - project = @positions_map[pos_id].try(:project)
          - next unless project
          .margin_bottom_10
            = project.decorate.icon(:small, width: 24)
            = link_to truncate(project.name, length: 10), project_path(project), class: 'margin_left_5'
      .pull-left.other_language.other_projects
        - if more_pos_count > 0
          - pluaral_term1 = pluralize_without_count(other_langs_count, 'project')
          = link_to t('.positions_link_text1',  more_pos_count: more_pos_count, pluaral_term: pluaral_term1),
          account_positions_path(account), class: 'more_commits_padding'
        - else
          = link_to t('.positions_link_text2'), account_positions_path(account), class: 'more_commits_padding'
    - else
      %p.no_commits= t('.no_commits')
  - unless only_device?
    .pull-left.kudo_rank.signature_color
      = account.kudo_rank

    .mini-badges-section.pull-left.kudo_badge
      = render 'badges_row', badges: [BadgeDecorator.new(KudoRankBadge.new(account))]
  .clear
